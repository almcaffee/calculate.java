package math;

import static java.lang.Double.parseDouble;
import java.math.BigDecimal;
import java.util.*;

/**
 * @author Ollie Tinsley
 */
public class Calculate extends javax.swing.JFrame {

    public Calculate() {
        this.tabulate = new mathPad();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        seven = new javax.swing.JButton();
        four = new javax.swing.JButton();
        one = new javax.swing.JButton();
        plusMinus = new javax.swing.JButton();
        commitVar = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        eight = new javax.swing.JButton();
        nine = new javax.swing.JButton();
        deleteVar = new javax.swing.JButton();
        zero = new javax.swing.JButton();
        divide = new javax.swing.JButton();
        three = new javax.swing.JButton();
        six = new javax.swing.JButton();
        decimal = new javax.swing.JButton();
        minusVar = new javax.swing.JButton();
        multiplyVar = new javax.swing.JButton();
        addVar = new javax.swing.JButton();
        five = new javax.swing.JButton();
        two = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        mathStringText = new javax.swing.JTextField();
        currentOutput = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        seven.setText("7");
        seven.setMaximumSize(new java.awt.Dimension(45, 25));
        seven.setMinimumSize(new java.awt.Dimension(45, 25));
        seven.setPreferredSize(new java.awt.Dimension(45, 25));
        seven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenActionPerformed(evt);
            }
        });

        four.setText("4");
        four.setMaximumSize(new java.awt.Dimension(45, 25));
        four.setMinimumSize(new java.awt.Dimension(45, 25));
        four.setPreferredSize(new java.awt.Dimension(45, 25));
        four.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourActionPerformed(evt);
            }
        });

        one.setText("1");
        one.setMaximumSize(new java.awt.Dimension(45, 25));
        one.setMinimumSize(new java.awt.Dimension(45, 25));
        one.setPreferredSize(new java.awt.Dimension(45, 25));
        one.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneActionPerformed(evt);
            }
        });

        plusMinus.setText("+/-");
        plusMinus.setMaximumSize(new java.awt.Dimension(45, 25));
        plusMinus.setMinimumSize(new java.awt.Dimension(45, 25));
        plusMinus.setPreferredSize(new java.awt.Dimension(45, 25));
        plusMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusMinusActionPerformed(evt);
            }
        });

        commitVar.setText("=");
        commitVar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commitVarActionPerformed(evt);
            }
        });

        clear.setText("clear");
        clear.setMaximumSize(new java.awt.Dimension(75, 25));
        clear.setMinimumSize(new java.awt.Dimension(75, 25));
        clear.setPreferredSize(new java.awt.Dimension(75, 25));
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        eight.setText("8");
        eight.setMaximumSize(new java.awt.Dimension(45, 25));
        eight.setMinimumSize(new java.awt.Dimension(45, 25));
        eight.setPreferredSize(new java.awt.Dimension(45, 25));
        eight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightActionPerformed(evt);
            }
        });

        nine.setText("9");
        nine.setMaximumSize(new java.awt.Dimension(45, 25));
        nine.setMinimumSize(new java.awt.Dimension(45, 25));
        nine.setPreferredSize(new java.awt.Dimension(45, 25));
        nine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nineActionPerformed(evt);
            }
        });

        deleteVar.setText("delete");
        deleteVar.setMaximumSize(new java.awt.Dimension(75, 25));
        deleteVar.setMinimumSize(new java.awt.Dimension(75, 25));
        deleteVar.setPreferredSize(new java.awt.Dimension(75, 25));
        deleteVar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteVarActionPerformed(evt);
            }
        });

        zero.setText("0");
        zero.setMaximumSize(new java.awt.Dimension(45, 25));
        zero.setMinimumSize(new java.awt.Dimension(45, 25));
        zero.setPreferredSize(new java.awt.Dimension(45, 25));
        zero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroActionPerformed(evt);
            }
        });

        divide.setText("/");
        divide.setMaximumSize(new java.awt.Dimension(45, 25));
        divide.setMinimumSize(new java.awt.Dimension(45, 25));
        divide.setPreferredSize(new java.awt.Dimension(45, 25));
        divide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divideActionPerformed(evt);
            }
        });

        three.setText("3");
        three.setMaximumSize(new java.awt.Dimension(45, 25));
        three.setMinimumSize(new java.awt.Dimension(45, 25));
        three.setPreferredSize(new java.awt.Dimension(45, 25));
        three.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeActionPerformed(evt);
            }
        });

        six.setText("6");
        six.setMaximumSize(new java.awt.Dimension(45, 25));
        six.setMinimumSize(new java.awt.Dimension(45, 25));
        six.setPreferredSize(new java.awt.Dimension(45, 25));
        six.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixActionPerformed(evt);
            }
        });

        decimal.setText(".");
        decimal.setMaximumSize(new java.awt.Dimension(45, 25));
        decimal.setMinimumSize(new java.awt.Dimension(45, 25));
        decimal.setPreferredSize(new java.awt.Dimension(45, 25));
        decimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decimalActionPerformed(evt);
            }
        });

        minusVar.setText("-");
        minusVar.setMaximumSize(new java.awt.Dimension(45, 25));
        minusVar.setMinimumSize(new java.awt.Dimension(45, 25));
        minusVar.setPreferredSize(new java.awt.Dimension(45, 25));
        minusVar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusVarActionPerformed(evt);
            }
        });

        multiplyVar.setText("*");
        multiplyVar.setMaximumSize(new java.awt.Dimension(45, 25));
        multiplyVar.setMinimumSize(new java.awt.Dimension(45, 25));
        multiplyVar.setPreferredSize(new java.awt.Dimension(45, 25));
        multiplyVar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplyVarActionPerformed(evt);
            }
        });

        addVar.setText("+");
        addVar.setMaximumSize(new java.awt.Dimension(45, 25));
        addVar.setMinimumSize(new java.awt.Dimension(45, 25));
        addVar.setPreferredSize(new java.awt.Dimension(45, 25));
        addVar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVarActionPerformed(evt);
            }
        });

        five.setText("5");
        five.setMaximumSize(new java.awt.Dimension(45, 25));
        five.setMinimumSize(new java.awt.Dimension(45, 25));
        five.setPreferredSize(new java.awt.Dimension(45, 25));
        five.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fiveActionPerformed(evt);
            }
        });

        two.setText("2");
        two.setMaximumSize(new java.awt.Dimension(45, 25));
        two.setMinimumSize(new java.awt.Dimension(45, 25));
        two.setPreferredSize(new java.awt.Dimension(45, 25));
        two.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoActionPerformed(evt);
            }
        });

        jLayeredPane1.setBackground(new java.awt.Color(255, 255, 255));
        jLayeredPane1.setForeground(new java.awt.Color(255, 255, 255));

        mathStringText.setBackground(new java.awt.Color(240, 240, 240));
        mathStringText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        mathStringText.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        mathStringText.setMargin(new java.awt.Insets(5, 5, 5, 5));

        currentOutput.setBackground(new java.awt.Color(240, 240, 240));
        currentOutput.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        currentOutput.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        currentOutput.setText("0");
        currentOutput.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));

        jLayeredPane1.setLayer(mathStringText, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(currentOutput, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(currentOutput)
            .addComponent(mathStringText)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mathStringText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLayeredPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(four, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(one, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(plusMinus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(seven, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(five, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                    .addComponent(two, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(zero, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(eight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(six, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                    .addComponent(nine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(three, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(decimal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addVar, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                    .addComponent(minusVar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(divide, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(multiplyVar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(deleteVar, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(commitVar, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deleteVar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(commitVar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(seven, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(eight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(divide, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(five, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(one, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(two, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(three, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(minusVar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(zero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(decimal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addVar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(plusMinus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(six, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(multiplyVar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(58, 58, 58)))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>                        

    private void nineActionPerformed(java.awt.event.ActionEvent evt) {                                     
 
        tabulate.setData("9");
    }                                    
                             
    private void oneActionPerformed(java.awt.event.ActionEvent evt) {                                    
		
        tabulate.setData("1");
    }                                   

    private void commitVarActionPerformed(java.awt.event.ActionEvent evt) {                                          
 
        tabulate.calculate();
    }                                         

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {                                      
 
        tabulate.clear();
    }                                     

    private void addVarActionPerformed(java.awt.event.ActionEvent evt) {                                       
 
        String thisChar = "+";
        char oper = thisChar.charAt(0);
        tabulate.setOperator(oper);
    }                                      

    private void fourActionPerformed(java.awt.event.ActionEvent evt) {                                     
 
        tabulate.setData("4");
    }                                    

    private void sevenActionPerformed(java.awt.event.ActionEvent evt) {                                      
 
        tabulate.setData("7");
    }                                     

    private void eightActionPerformed(java.awt.event.ActionEvent evt) {                                      
 
        tabulate.setData("8");
    }                                     

    private void fiveActionPerformed(java.awt.event.ActionEvent evt) {                                     
 
        tabulate.setData("5");
    }                                    

    private void zeroActionPerformed(java.awt.event.ActionEvent evt) {                                     
 
        tabulate.setData("0");
    }                                    

    private void twoActionPerformed(java.awt.event.ActionEvent evt) {                                    
 
        tabulate.setData("2");
    }                                   

    private void threeActionPerformed(java.awt.event.ActionEvent evt) {                                      
 
        tabulate.setData("3");
    }                                     

    private void sixActionPerformed(java.awt.event.ActionEvent evt) {                                    
 
        tabulate.setData("6");
    }                                   

    private void minusVarActionPerformed(java.awt.event.ActionEvent evt) {                                         
 
        String thisChar = "-";
        char oper = thisChar.charAt(0);
        tabulate.setOperator(oper);
    }                                        

    private void multiplyVarActionPerformed(java.awt.event.ActionEvent evt) {                                            
 
        String thisChar = "*";
        char oper = thisChar.charAt(0);
        tabulate.setOperator(oper);
    }                                           

    private void divideActionPerformed(java.awt.event.ActionEvent evt) {                                       
 
        String thisChar = "/";
        char oper = thisChar.charAt(0);
        tabulate.setOperator(oper);
    }                                      

    private void decimalActionPerformed(java.awt.event.ActionEvent evt) {                                        
 
        tabulate.setDecimal();
    }                                       

    private void plusMinusActionPerformed(java.awt.event.ActionEvent evt) {                                          
 
        tabulate.absVal();
    }                                         

    private void deleteVarActionPerformed(java.awt.event.ActionEvent evt) {                                          
 
        tabulate.delete();
    }                                         

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calculate().setVisible(true);
            }
        });
    }
    
     private class mathPad {
       
        private List<Double> numbers;
        private String display;
        private String current;
        private char operand;
        
        public mathPad() {
           numbers = new ArrayList<Double>();
           display = "";
           current = "";
           operand = ' ';
        }
        
        /* Clears contents after printing */
        private void clear() {
            display = "";
            current = "";
            numbers.clear();
            mathStringText.setText("");
            currentOutput.setText("0");
        }
        
        private void clearCurrent() {
            current = "";
        }
        
        private void replaceOperand(char newoper) {
            operand = newoper;
        }
        
        private void addDisplay(String var) {
            display += var;
        }
        
        private void addCurrent(String var) {
            current += var;
        }
        
        private void addDouble(Double var) {
         

//            try {
                numbers.add(var);
                System.out.println("size:" +numbers.size());
                
                if(numbers.size() > 0){
                    for(int i = 0; i<numbers.size(); i++) {
                        System.out.println(i + ":" +numbers.get(i));
                    }
                }
                System.out.println("addDoub current value: " +current);
                clearCurrent();
                
//            } catch (Exception e) {
//                
//            }
            
            
//            current = Double.toString(var);
//            currentOutput.setText(current);
        }
        
        private void setDouble() {
            
            String decimal =".";
            String negative ="-";
            String temp;
            int abs;
            Double d;
          
            if(current.contains(negative)){
                temp = current.substring(1,current.length());
                abs = -1;
            } else {
                temp = current;
                abs = 1;
            }
            
            if(temp.contains(decimal)) {
                d = new Double(temp);
            } else {
                Integer add = new Integer(temp);
                d = add.doubleValue();
            }
            
            d *= abs;
            System.out.println("setDoub current value: " +d);
            addDouble(d);
            
            
        }
        private void calculate(){
            
            System.out.println("if(numbers.size() == 2) {" +numbers.size());
            if(numbers.size() == 2) {
                System.out.println("calculating");
                System.out.println(".....");
                System.out.println("....");
                System.out.println("...");
                System.out.println("..");
                System.out.println(".");
                double result = 0;
                switch (operand)
                {
                    case '+': result = numbers.get(0) + numbers.get(1);
                        break;
                    case '-': result = numbers.get(0) - numbers.get(1);
                        break;
                    case '*': result = numbers.get(0) * numbers.get(1);
                        break;
                    case '/': result = numbers.get(0) / numbers.get(1);
                        break;
                    default: ;
                }
                System.out.println("value returned: " + result);
                numbers.clear();
                
                Double truncateResult = new BigDecimal(result)
                        .setScale(2,BigDecimal.ROUND_HALF_UP).doubleValue();
                
                String outstream;
                float b = (float)Math.ceil(result);
                if(result == 0){
                    outstream = "0";
                }
                else if((b - result) != 0) {
                    outstream = String.valueOf(truncateResult);
                } else {
                    String temp = String.valueOf(truncateResult);
                    outstream = temp.substring(0,temp.length() - 2);
                }
                
                System.out.println("calculate current value: " +current);
                addDouble(result);
                System.out.println("then its cleared to: " +current);
                System.out.println("String.valueOf(result);: " +String.valueOf(result));
                
                currentOutput.setText(outstream);
            
            } else if(numbers.size() == 1  && current.length() > 0) {
                setDouble();
                mathStringText.setText("");
                calculate();
                
            }
        /* Call display function for calculated value */
        /* Also should clear display string text */
        
        /* System.out.println("The answer is " + result); */
        }
        
        private void setOperator(char oper) {
            
            System.out.println("operand: " + operand);
            int mathSize = display.length();
            System.out.println("setting operator");
            
            if(display.length() >= 4) {
                
                System.out.println("inside mathlength");
                char isOper = display.charAt(mathSize - 2);
                String exp = Character.toString(isOper);
                if(exp.matches("^([-+/*^])")) {
//                    System.out.println("matched expression");
                    String addOper = " " + Character.toString(oper) + " ";
                    String repTemp = display.substring(0,mathSize-3) + addOper;
                    display = repTemp;
                } else {
//                    System.out.println("did not match expression");
                    String addOper = " " + Character.toString(oper) + " "; 
                    addDisplay(addOper);
                }
            } else {
//                    System.out.println("size too small");
                    String addOper = " " + Character.toString(oper) + " "; 
                    addDisplay(addOper);
            }
            System.out.println("setOper current value: " +operand);
            if(current.length() > 0) {
                setDouble();
                clearCurrent();
                calculate();
            }
            mathStringText.setText(display);
            
            if(operand != oper) {
                replaceOperand(oper);
            }
            
        }
        
        private void setDecimal() {
            String dec = ".";
            
            if(!(current.contains(dec))) {
                if(current.length() >= 1 ){
                    addDisplay(dec);
                    addCurrent(dec);
                    mathStringText.setText(display);
                    currentOutput.setText(current);
                } else {
                    String addZero = "0.";
                    addCurrent(addZero);
                    addDisplay(addZero);
                    currentOutput.setText(current);
                }
            }
           System.out.println("setDec current value: " +current); 
        }
        
        private void setData(String input) {
            
            addDisplay(input);
            addCurrent(input);
            mathStringText.setText(display);
            currentOutput.setText(current);
            
            System.out.println("setData current value: " +current);
        }
        
        private void absVal() {
            
            if(current.length() > 0){
               
                String curAbs;
                if(current.contains("-")) {
                    curAbs = current.substring(1,current.length() -1);
                } else {
                    curAbs = "-" + current;
                }
                
                current = curAbs;
                currentOutput.setText(current);

                int lastSpace = display.lastIndexOf(" ");
                String repTemp;
                if(lastSpace >= 0) {
                    repTemp = display.substring(0,lastSpace+1) +  current;
                } else {
                    repTemp = current;
                }
                display = repTemp;
                mathStringText.setText(display);
                
            } else {
                currentOutput.setText("Really!");
            }
            
            
            System.out.println("absVal current value: " +current);
        }
        
        private void delete() {
            if(current.length() > 1) {
                String temp = current.substring(0,current.length() -1);
                current = temp;
                currentOutput.setText(current);
            } else {
                currentOutput.setText("0");
            }
        }
    }
     
    private mathPad tabulate;

    // Variables declaration - do not modify                     
    private javax.swing.JButton addVar;
    private javax.swing.JButton clear;
    private javax.swing.JButton commitVar;
    private javax.swing.JTextField currentOutput;
    private javax.swing.JButton decimal;
    private javax.swing.JButton deleteVar;
    private javax.swing.JButton divide;
    private javax.swing.JButton eight;
    private javax.swing.JButton five;
    private javax.swing.JButton four;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JTextField mathStringText;
    private javax.swing.JButton minusVar;
    private javax.swing.JButton multiplyVar;
    private javax.swing.JButton nine;
    private javax.swing.JButton one;
    private javax.swing.JButton plusMinus;
    private javax.swing.JButton seven;
    private javax.swing.JButton six;
    private javax.swing.JButton three;
    private javax.swing.JButton two;
    private javax.swing.JButton zero;
    // End of variables declaration                   
}
